{"version":3,"sources":["Components/Container/Container.module.css","Components/ContactForm/ContactForm.module.css","Components/ContactList/ContactList.module.css","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Container/Container.js","Components/Filter/Filter.js","App.js","index.js","Components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","state","name","number","handleSubmit","e","preventDefault","props","onSubmit","reset","handleChange","setState","currentTarget","value","className","styles","form","this","label","input","type","pattern","title","required","onChange","button","Component","ContactList","contacts","onDeleteContact","list","map","id","item","contact","onClick","Container","children","container","Filter","filter","App","addContact","newContact","shortid","generate","some","alert","prevState","changeFilter","getFilteredContacts","normalizedFilter","toLowerCase","includes","deleteContact","contactId","resetFilter","console","log","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53266091.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3e1Mh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2IF4m\",\"label\":\"ContactForm_label__2mfXY\",\"input\":\"ContactForm_input__3dHde\",\"button\":\"ContactForm_button__3oBpw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2cE9S\",\"item\":\"ContactList_item__MbtlS\",\"contact\":\"ContactList_contact__2n-Pp\",\"button\":\"ContactList_button__3KnM2\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css'\n\nclass ContactForm extends Component {\n\n    state = {\n        name: '',\n        number: ''\n    }\n\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        // передаем данные из этого state через проп в App\n        this.props.onSubmit(this.state)\n        this.reset();\n    }\n    \n    handleChange = e => {\n        this.setState(\n            {[e.currentTarget.name]: e.currentTarget.value}\n        )\n    }\n\n    reset = () => {\n        this.setState({\n            name: '',\n            number: ''\n        })\n    }\n\n    render() {\n        return (\n            <form className={styles.form}\n                onSubmit={this.handleSubmit}>\n                <label className = {styles.label}>Name \n                    <input\n                        className = {styles.input}\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                        value={this.state.name}\n                        onChange = {this.handleChange}\n                    />\n                </label>\n                <label className = {styles.label}>Number \n                    <input\n                        className = {styles.input}\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                        required\n                        value={this.state.number}\n                        onChange = {this.handleChange}\n                        />\n                </label>\n                <button className={styles.button} type = \"submit\">Add contact</button>\n            </form>    \n        )\n    }\n}\n\nContactForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport default ContactForm;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n    <div>\n        <ul className = {styles.list}>\n            {contacts.map(( {id, name, number} ) => (\n                <li key={id} className = {styles.item}>\n                    <p className = {styles.contact}>{name}: {number}</p>\n                    <button className = {styles.button} onClick = {()=> onDeleteContact(id)}>Delete</button>\n                </li>\n            ))}\n        </ul>\n     </div>\n)\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired\n        })\n    ).isRequired,\n    onDeleteContact:PropTypes.func.isRequired\n}\n\nexport default ContactList;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport styles from './Container.module.css'\n\nconst Container = ({children}) => \n    <div className={styles.container} >\n        {children}\n    </div>;\n\nContainer.propTypes = {\n    children: PropTypes.node.isRequired\n}\n\n\n\nexport default Container;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.css'\n\n\nconst Filter = ({ value, onChange, onClick }) => (\n    <div className = {styles.filter}>\n    <label className = {styles.label}>Find contacts by name \n                    <input\n                        className = {styles.input}\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                        value= {value}\n            onChange={onChange}\n        />\n    </label>\n        <button className={styles.button} onClick={onClick}>Clear</button>\n        </div>\n)\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nexport default Filter;","import React, { Component } from 'react';\nimport ContactForm from './Components/ContactForm';\nimport ContactList from './Components/ContactList/';\nimport Container from './Components/Container';\nimport Filter from './Components/Filter';\nimport shortid from 'shortid';\n\nclass App extends Component {\n    state = {\n        contacts: [\n            {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n            {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n            {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n            {id: 'id-4', name: 'Annie Copeland', number: '227-91-26' }\n        ],\n        filter:''\n    }    \n    \n    componentDidMount() {\n        console.log('App component did mount');\n        const contacts = localStorage.getItem('contacts');\n        \n        const parsedContacts = JSON.parse(contacts);\n        \n        //если есть распарсенные контакты из localStorage (т.е. если в lS лежат контакты\n        //- тогда передаются они в state\n        if (parsedContacts) {\n            this.setState({ contacts: parsedContacts })\n        }\n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        console.log('App component did update');\n        \n        if (this.state.contacts !== prevState.contacts) {\n            console.log('Обновилось поле contacts, записываю todos в хранилище');\n            localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n        }\n    }\n\n    addContact = (newContact) => {        \n        newContact['id'] = shortid.generate();\n        this.state.contacts.some(contact => contact.name === newContact.name)\n        ? alert (`${newContact.name} is already in contacts.`)\n        :this.setState(prevState=>({ contacts: [newContact, ...prevState.contacts]}))\n    }\n\n    changeFilter = e => {\n        this.setState({ filter: e.currentTarget.value })\n        \n    }\n\n    getFilteredContacts = () => {\n        const normalizedFilter = this.state.filter.toLowerCase();\n       \n        return this.state.contacts.filter(contact =>\n            contact.name.toLowerCase().includes(normalizedFilter))\n        \n    }\n\n    deleteContact = (contactId) => {\n        this.setState(prevState => ({\n            contacts: prevState.contacts.filter(contact =>\n                contact.id !== contactId)            \n        }))\n    }\n\n    resetFilter = () => {\n        this.setState({filter: ''})\n    }\n\n    render() {\n        const visibleContacts = this.getFilteredContacts()\n        return (\n            <Container>\n                <h1>Phonebook</h1>\n                {/* передаем проп onSubmit для ContactForm, сюда будет прокидываться data из ContactForm*/}\n                <ContactForm onSubmit={this.addContact}/>\n                \n                <h2>Contacts</h2>\n                <Filter value={this.state.filter} onChange={this.changeFilter} onClick={this.resetFilter}/>\n                <ContactList contacts={visibleContacts} onDeleteContact={this.deleteContact}/>\n            </Container>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__19jWm\",\"input\":\"Filter_input__2CEsa\",\"filter\":\"Filter_filter__35l_Z\",\"button\":\"Filter_button__2LyGl\"};"],"sourceRoot":""}